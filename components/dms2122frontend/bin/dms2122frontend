#!/usr/bin/env python3

from flask import Flask, redirect, url_for
import inspect
import os
from typing import Dict
import dms2122frontend
from dms2122frontend.data.config import FrontendConfiguration
from dms2122frontend.data.rest import AuthService, BackendService
from dms2122frontend.presentation.web import \
    AdminEndpoints, CommonEndpoints, SessionEndpoints, StudentEndpoints, TeacherEndpoints

cfg: FrontendConfiguration = FrontendConfiguration()
cfg.load_from_file(cfg.default_config_file())
auth_service_cfg: Dict = cfg.get_auth_service()
auth_service: AuthService = AuthService(
    auth_service_cfg['host'], auth_service_cfg['port'],
    apikey_header='X-ApiKey-Auth',
    apikey_secret=auth_service_cfg['apikey_secret']
)
backend_service_cfg: Dict = cfg.get_backend_service()
backend_service: BackendService = BackendService(
    backend_service_cfg['host'], backend_service_cfg['port'],
    apikey_header='X-ApiKey-Backend',
    apikey_secret=backend_service_cfg['apikey_secret']
)

app = Flask(
    __name__,
    static_folder=os.path.dirname(
        inspect.getfile(dms2122frontend)) + '/static',
    template_folder=os.path.dirname(
        inspect.getfile(dms2122frontend)) + '/templates'
)
app.secret_key = bytes(cfg.get_app_secret_key(), 'ascii')


@app.route("/", methods=['GET'])
def get_root():
    return redirect(url_for("get_login"))

@app.route("/login", methods=['GET'])
def get_login():
    return SessionEndpoints.get_login(auth_service)

@app.route("/login", methods=['POST'])
def post_login():
    return SessionEndpoints.post_login(auth_service)

@app.route("/logout", methods=['GET'])
def get_logout():
    return SessionEndpoints.get_logout()

@app.route("/home", methods=['GET'])
def get_home():
    return CommonEndpoints.get_home(auth_service)

# pagina del alumno, vera un boton de acceso a las preguntas, otro para ver las respuestas ya dadas y otro para ver su progreso
@app.route("/student", methods=['GET'])
def get_student():
    return StudentEndpoints.get_student(auth_service)

# lista de preguntas por contestar del alumno con la opcion de acceso a una pregunta para contestar
@app.route("/student/questions", methods=['GET'])
def get_student_questions():
    return StudentEndpoints.get_student_questions(auth_service, backend_service)

# pregunta seleccionada para contestar 
@app.route("/student/questions/question", methods=['GET'])
def get_student_questions_question():
    return StudentEndpoints.get_student_questions_question(auth_service, backend_service)

@app.route("/student/questions/question", methods=['POST'])
def post_student_questions_question():
    return StudentEndpoints.post_student_questions_question(auth_service, backend_service)

# pagina de las respuestas ya dadas por el alummno
@app.route("/student/answers", methods=['GET'])
def get_student_answers():
    return StudentEndpoints.get_student_answers(auth_service, backend_service)

# pagina del progreso del alumno
@app.route("/student/progress", methods=['GET'])
def get_student_progress():
    return StudentEndpoints.get_student_progress(auth_service, backend_service)

# pagina del profesor, vera un voton de gestion de preguntas y otro de gestion de alumnos
@app.route("/teacher", methods=['GET'])
def get_teacher():
    return TeacherEndpoints.get_teacher(auth_service)

# listado de preguntas con botones de edicion, ver estadisticas o a√±adir una nueva pregunta
@app.route("/teacher/questions", methods=['GET'])
def get_teacher_questions():
    return TeacherEndpoints.get_teacher_questions(auth_service, backend_service)

# adicion de una nueva pregunta
@app.route("/teacher/questions/new", methods=['GET'])
def get_teacher_questions_new():
    return TeacherEndpoints.get_teacher_questions_new(auth_service, backend_service)

@app.route("/teacher/questions/new", methods=['POST'])
def post_teacher_questions_new():
    return TeacherEndpoints.post_teacher_questions_new(auth_service, backend_service)

# edicion de una pregunta existente
@app.route("/teacher/questions/edit", methods=['GET'])
def get_teacher_questions_edit():
    return TeacherEndpoints.get_teacher_questions_edit(auth_service, backend_service)

@app.route("/teacher/questions/edit", methods=['POST'])
def post_teacher_questions_edit():
    return TeacherEndpoints.post_teacher_questions_edit(auth_service, backend_service)

# estadisticas de esa pregunta 
@app.route("/teacher/questions/stats", methods=['GET'])
def get_teacher_questions_stats():
    return TeacherEndpoints.get_teacher_questions_stats(auth_service, backend_service)

# estadisticas de los alumnos
@app.route("/teacher/studentsStats", methods=['GET'])
def get_teacher_studentsStats():
    return TeacherEndpoints.get_teacher_studentsStats(auth_service, backend_service)

    
@app.route("/admin", methods=['GET'])
def get_admin():
    return AdminEndpoints.get_admin(auth_service)

@app.route("/admin/users", methods=['GET'])
def get_admin_users():
    return AdminEndpoints.get_admin_users(auth_service)

@app.route("/admin/users/new", methods=['GET'])
def get_admin_users_new():
    return AdminEndpoints.get_admin_users_new(auth_service)

@app.route("/admin/users/new", methods=['POST'])
def post_admin_users_new():
    return AdminEndpoints.post_admin_users_new(auth_service)

@app.route("/admin/users/edit", methods=['GET'])
def get_admin_users_edit():
    return AdminEndpoints.get_admin_users_edit(auth_service)

@app.route("/admin/users/edit", methods=['POST'])
def post_admin_users_edit():
    return AdminEndpoints.post_admin_users_edit(auth_service)




if __name__ == '__main__':
    app.run(
        host=cfg.get_service_host(),
        port=cfg.get_service_port(),
        debug=cfg.get_debug_flag()
    )